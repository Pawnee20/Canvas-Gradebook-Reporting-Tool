/*

The following Google AppScript utilizes an imported CSV Gradebook file from Canvas in Google Sheets and generates
a report for each individual from a template.

*/


var DOC = ""; //ID of the Template document
var SS = SpreadsheetApp.getActiveSpreadsheet();
var SHEET = SpreadsheetApp.getActiveSheet();

/*
createRecords pulls data from the spreadsheet and assigns a hash for each user and their assignments.
The hash is used when generating a new document
*/
function createRecords() {  
  var records = SHEET.getRange(1, 1, SS.getLastRow(), SS.getLastColumn()).getValues();
  var assignmentList = getAssignments();
  var assignments = SHEET.getRange(1, 6, SS.getLastRow(), assignmentList).getValues();
  var hashArray = [];
  
  for(var i in records) {
    var hashStudent = {};
    hashStudent["studentName"] = records[i][0];
    hashStudent["studentID"] = records[i][2];
    hashStudent["finalGrade"] = records[i][SS.getLastColumn()-1];
    hashStudent["key"] = i;
    for(var z=0; z <= assignmentList; z++) {
      hashStudent[assignments[0][z]] = assignments[i][z];
    }
    hashArray.push(hashStudent);
   }
    
  createDocument(assignmentList,hashArray) 
}

//createDocument uses the hash generated by createRecords and cycles through each 
//instance to insert the necessary information in the report.
function createDocument(list,hash) {
  var assignments = SHEET.getRange(1, 6, 1, list).getValues().pop();
  var pp = SHEET.getRange(2, 6, 1, list).getValues().pop();
  
  for(var n in hash) {
  var newdoc = DriveApp.getFileById(DOC).makeCopy("Report").getId(); //creates a copy of the template and pulls the ID.
  var opendoc = DocumentApp.openById(newdoc).getBody(); //gets the contents of the new document using the ID.
  hash.splice(0,2);
  
  //Does a find and replace for each element of the document
  opendoc.replaceText("<s1>", hash[0]["studentName"]);
  opendoc.replaceText("<s2>", hash[0]["studentID"]);
  opendoc.replaceText("<s3>", hash[0]["finalGrade"]);
  
  //The template has a table where individual assignments are stored. This loop enters the students' assignment details.
  var table = opendoc.getTables()[1];
    for(var i in assignments) {
      var tr = table.appendTableRow();
      tr.appendTableCell(assignments[i]);
      tr.appendTableCell(pp[i]);
      tr.appendTableCell(hash[i][assignments[i]]);
    }
  }
}

function getAssignments() {
  var assignmentsRecords = SHEET.getRange(2, 6, 1, SS.getLastColumn()).getValues().pop();
  Logger.log(assignmentsRecords)
  for(var i in assignmentsRecords) {
    if(assignmentsRecords[i]=='(read only)'){
      return i;
    }
  }
}


//mergeGoogleDocs pulls any files generated by the reporting tool and merges everything into one single document
function mergeGoogleDocs() {
  var files = DriveApp.getFilesByName("Report");
  var docIDs = [];
  while (files.hasNext()) {
   var file = files.next();
    docIDs.push(file.getId());
  }
  var baseDoc = DocumentApp.openById(docIDs[0]);
 baseDoc.getBody().appendPageBreak()
  var body = baseDoc.getActiveSection();
 
 //By default, Google Docs needs to copy/append document elements separately. This loop encapsulated by if statements
 //goes through each possible element in the old document and appends it to the new one at the right time.
  for (var i = 1; i < docIDs.length; ++i ) {
    var otherBody = DocumentApp.openById(docIDs[i]).getActiveSection();
    var totalElements = otherBody.getNumChildren();
    
    for( var j = 0; j < totalElements; ++j ) {
      var element = otherBody.getChild(j).copy();
      var type = element.getType();
      if( type == DocumentApp.ElementType.PARAGRAPH )
        body.appendParagraph(element);
      else if( type == DocumentApp.ElementType.TABLE )
        body.appendTable(element);
      
      else if( type == DocumentApp.ElementType.LIST_ITEM )
        body.appendListItem(element);
      else
        throw new Error("Unknown element type: "+type);
    }
    body.appendPageBreak();
  }

}

function categoryBreakdowns() {
  var i = Number(getAssignments())+6;
  Logger.log(i)
  
  var categories = SHEET.getRange(1, i, 1, SS.getLastColumn()).getValues();
  Logger.log(categories)
}

